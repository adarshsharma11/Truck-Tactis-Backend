generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Truck {
  id                  Int         @id @default(autoincrement())
  truckName           String      @unique
  capacityCuFt        Float
  maxWeightLbs        Float
  lengthFt            Float
  widthFt             Float
  heightFt            Float
  truckType           TruckType
  color               String?
  yearOfManufacture   Int?
  isActive            Boolean     @default(true)
  currentStatus       TruckStatus @default(AVAILABLE)
  restrictedLoadTypes Json?
  gpsEnabled          Boolean     @default(true)
  lastKnownLat        Float?
  lastKnownLng        Float?
  driverId            Int?        @unique
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  jobs                Job[]
  driver              Driver?     @relation(fields: [driverId], references: [id])
}

model Driver {
  id        Int       @id @default(autoincrement())
  name      String
  licenseNo String    @unique
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  truckType TruckType @default(MEDIUM)
  jobs      Job[]
  truck     Truck?
}

model Location {
  id          Int      @id @default(autoincrement())
  placeId     String   @unique
  name        String
  address     String
  latitude    Float
  longitude   Float
  city        String?
  state       String?
  country     String?
  postalCode  String?
  isSaved     Boolean  @default(false)
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]
  createdBy   User?    @relation(fields: [createdById], references: [id])
}

model Job {
  id               Int        @id @default(autoincrement())
  title            String
  actionType       ActionType
  locationId       Int?
  priority         Int        @default(1)
  earliestTime     DateTime?
  latestTime       DateTime?
  serviceMinutes   Int?
  notes            String?
  largeTruckOnly   Boolean    @default(false)
  curfewFlag       Boolean    @default(false)
  assignedTruckId  Int?
  assignedDriverId Int?
  isCompleted      Boolean    @default(false)
  isFiction        Boolean    @default(false)
  datePublished    DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  truckType        TruckType  @default(MEDIUM)
  assignedDriver   Driver?    @relation(fields: [assignedDriverId], references: [id])
  assignedTruck    Truck?     @relation(fields: [assignedTruckId], references: [id])
  location         Location?  @relation(fields: [locationId], references: [id])
  items            Item[]     @relation("JobItems")
}

model User {
  id        String     @id @unique
  fullName  String
  username  String     @unique
  password  String
  email     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]
}

model ItemCategory {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  parentId    Int?
  items       Item[]
  parent      ItemCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ItemCategory[] @relation("CategoryHierarchy")
}

model Item {
  id                 Int           @id @default(autoincrement())
  name               String
  sku                String?
  weightLbs          Float?
  lengthIn           Float?
  widthIn            Float?
  heightIn           Float?
  notes              String?
  requiresLargeTruck Boolean       @default(false)
  categoryId         Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  truckType          TruckType     @default(MEDIUM)
  category           ItemCategory? @relation(fields: [categoryId], references: [id])
  jobs               Job[]         @relation("JobItems")
}

enum TruckType {
  SMALL
  MEDIUM
  LARGE
  HEAVY_DUTY
}

enum TruckStatus {
  AVAILABLE
  IN_TRANSIT
  MAINTENANCE
  UNAVAILABLE
}

enum ActionType {
  PICKUP
  DROPOFF
}
